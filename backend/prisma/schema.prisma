// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(uuid())
  name        String
  email       String   @unique
  phone       String   @unique
  password    String
  age         Int
  gender      Gender
  address     Address?
  photo       String?
  role        UserRole @default(USER)
  isVerified  Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  casesAsPlaintiff Case[] @relation("PlaintiffCases")
  casesAsDefendant Case[] @relation("DefendantCases")
  panelMemberships PanelMember[]
  notifications    Notification[]
  resourceProgress UserResourceProgress[]
  workshopRegistrations WorkshopRegistration[]
  agreementSignatures AgreementSignature[]

  @@map("users")
}

model Address {
  id       String @id @default(uuid())
  street   String
  city     String
  zipCode  String
  userId   String @unique
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("addresses")
}

model Case {
  id                    String     @id @default(uuid())
  caseType              CaseType
  issueDescription      String
  isCourtPending        Boolean    @default(false)
  caseNumber            String?
  firNumber             String?
  courtPoliceStation    String?
  status                CaseStatus @default(PENDING)
  oppositePartyResponse OppositePartyResponse @default(PENDING)
  mediationStartDate    DateTime?
  mediationEndDate      DateTime?
  resolutionDetails     String?
  createdAt             DateTime   @default(now())
  updatedAt             DateTime   @updatedAt

  // Relations
  plaintiffId           String
  plaintiff             User       @relation("PlaintiffCases", fields: [plaintiffId], references: [id])
  
  defendantId           String?
  defendant             User?      @relation("DefendantCases", fields: [defendantId], references: [id])
  
  oppositePartyDetails  OppositeParty?
  documents             Document[]
  panel                 Panel?
  caseUpdates           CaseUpdate[]
  notifications         Notification[]
  agreement             Agreement?

  @@map("cases")
}

model OppositeParty {
  id      String @id @default(uuid())
  name    String
  email   String?
  phone   String?
  address String?
  caseId  String @unique
  case    Case   @relation(fields: [caseId], references: [id], onDelete: Cascade)

  @@map("opposite_parties")
}

model Document {
  id       String       @id @default(uuid())
  filename String
  filepath String
  fileType DocumentType
  fileSize Int
  caseId   String
  case     Case         @relation(fields: [caseId], references: [id], onDelete: Cascade)
  uploadedAt DateTime   @default(now())

  @@map("documents")
}

model Panel {
  id        String   @id @default(uuid())
  caseId    String   @unique
  case      Case     @relation(fields: [caseId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  
  members   PanelMember[]

  @@map("panels")
}

model PanelMember {
  id       String     @id @default(uuid())
  panelId  String
  panel    Panel      @relation(fields: [panelId], references: [id], onDelete: Cascade)
  userId   String
  user     User       @relation(fields: [userId], references: [id])
  role     PanelRole
  
  @@unique([panelId, userId])
  @@map("panel_members")
}

model CaseUpdate {
  id          String   @id @default(uuid())
  caseId      String
  case        Case     @relation(fields: [caseId], references: [id], onDelete: Cascade)
  status      CaseStatus
  description String
  createdAt   DateTime @default(now())

  @@map("case_updates")
}

model Notification {
  id        String           @id @default(uuid())
  userId    String
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  caseId    String?
  case      Case?            @relation(fields: [caseId], references: [id], onDelete: Cascade)
  type      NotificationType
  title     String
  message   String
  isRead    Boolean          @default(false)
  createdAt DateTime         @default(now())

  @@map("notifications")
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum UserRole {
  USER
  ADMIN
  PANEL_MEMBER
  LAWYER
  RELIGIOUS_SCHOLAR
  SOCIAL_EXPERT
}

enum CaseType {
  FAMILY
  BUSINESS
  CRIMINAL
  PROPERTY
  OTHER
}

enum CaseStatus {
  PENDING
  AWAITING_RESPONSE
  ACCEPTED
  PANEL_CREATED
  MEDIATION_IN_PROGRESS
  RESOLVED
  UNRESOLVED
  REJECTED
}

enum DocumentType {
  IMAGE
  VIDEO
  AUDIO
  PDF
  OTHER
}

enum PanelRole {
  LAWYER
  RELIGIOUS_SCHOLAR
  SOCIAL_EXPERT
}

enum NotificationType {
  CASE_UPDATE
  PANEL_INVITATION
  MEDIATION_SCHEDULED
  CASE_RESOLVED
  OPPOSITE_PARTY_CONTACTED
  WORKSHOP_REMINDER
  WORKSHOP_CANCELLED
  RESOURCE_PUBLISHED
  AGREEMENT_READY
  SYSTEM
}

enum OppositePartyResponse {
  PENDING
  ACCEPTED
  REJECTED
}

// Educational Resources Models
model Resource {
  id          String      @id @default(uuid())
  title       String
  description String
  content     String      // Rich text content
  type        ResourceType
  category    String
  videoUrl    String?
  thumbnailUrl String?
  author      String
  isPublished Boolean     @default(false)
  viewCount   Int         @default(0)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  tags        ResourceTag[]
  userProgress UserResourceProgress[]

  @@map("resources")
}

model ResourceTag {
  id         String @id @default(uuid())
  name       String @unique
  resources  Resource[]

  @@map("resource_tags")
}

model UserResourceProgress {
  id         String   @id @default(uuid())
  userId     String
  resourceId String
  completed  Boolean  @default(false)
  progress   Int      @default(0) // Percentage
  lastAccessed DateTime @default(now())
  
  user       User     @relation(fields: [userId], references: [id])
  resource   Resource @relation(fields: [resourceId], references: [id])
  
  @@unique([userId, resourceId])
  @@map("user_resource_progress")
}

model Workshop {
  id          String   @id @default(uuid())
  title       String
  description String
  instructor  String
  maxParticipants Int
  scheduledAt DateTime
  duration    Int      // in minutes
  meetingUrl  String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  
  registrations WorkshopRegistration[]

  @@map("workshops")
}

model WorkshopRegistration {
  id         String   @id @default(uuid())
  userId     String
  workshopId String
  registeredAt DateTime @default(now())
  attended   Boolean  @default(false)
  
  user       User     @relation(fields: [userId], references: [id])
  workshop   Workshop @relation(fields: [workshopId], references: [id])
  
  @@unique([userId, workshopId])
  @@map("workshop_registrations")
}

// Agreement Generation Models
model AgreementTemplate {
  id          String   @id @default(uuid())
  name        String
  description String
  content     String   // Template with placeholders
  category    String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  
  agreements  Agreement[]

  @@map("agreement_templates")
}

model Agreement {
  id          String   @id @default(uuid())
  caseId      String   @unique
  templateId  String
  content     String   // Filled template
  status      AgreementStatus @default(DRAFT)
  createdAt   DateTime @default(now())
  signedAt    DateTime?
  
  case        Case     @relation(fields: [caseId], references: [id])
  template    AgreementTemplate @relation(fields: [templateId], references: [id])
  signatures  AgreementSignature[]

  @@map("agreements")
}

model AgreementSignature {
  id          String   @id @default(uuid())
  agreementId String
  userId      String
  signedAt    DateTime @default(now())
  ipAddress   String
  userAgent   String
  
  agreement   Agreement @relation(fields: [agreementId], references: [id])
  user        User      @relation(fields: [userId], references: [id])
  
  @@unique([agreementId, userId])
  @@map("agreement_signatures")
}

enum ResourceType {
  ARTICLE
  VIDEO
  WORKSHOP
  GUIDE
  TEMPLATE
}

enum AgreementStatus {
  DRAFT
  PENDING_SIGNATURES
  SIGNED
  EXECUTED
}